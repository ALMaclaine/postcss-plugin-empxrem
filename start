#!/usr/bin/env node

var exec = require('child_process').exec;
var path = require('path');
var fs   = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf8');

var questionCallback = null;

process.stdin.on('data', function (text) {
    questionCallback(text.trim());
});

var questions = {
    AUTHOR_NAME:  'Your name: ',
    AUTHOR_EMAIL: 'Your email: ',
    GITHUB_NAME:  'GitHub username: ',
    PLUGIN_NAME:  'Plugin name: postcss-',
    PLUGIN_DESC:  '\nFinish sentence with plugin description:\nPostCSS plugin ',
    KEYWORDS:     '\nFinish plugin keywords:\npostcss, css, postcssplugin, '
};
var autodetects = {
    AUTHOR_NAME:  'git config user.name',
    AUTHOR_EMAIL: 'git config user.email'
};
var answers = { };

var autodetect = function (code, callback) {
    var command = autodetects[code];
    if ( !command ) return callback();

    try {
        exec(command, function (_, stdout) {
            var value = stdout.trim();
            if ( value ) {
                process.stdout.write(questions[code] + value + '\n');
                answers[code] = value;
                lastQuestion += 1;
                nextQuestion();
            } else {
                callback();
            }
        });
    } catch (error) {
        callback()
    }
};

var lastQuestion = 0;
nextQuestion = function () {
    var code = Object.keys(questions)[lastQuestion];
    if ( code ) {
        autodetect(code, function () {
            process.stdout.write(questions[code]);
            questionCallback = function (result) {
                if ( result === '' ) {
                    nextQuestion();
                } else {
                    answers[code] = result;
                    lastQuestion += 1;
                    nextQuestion();
                }
            };
        });

    } else {
        answers.PLUGIN_NAME = 'postcss-' + answers.PLUGIN_NAME;
        answers.PLUGIN_TITLE = answers.PLUGIN_NAME
            .replace(/-\w/g, function (str) {
                return ' ' + str[1].toUpperCase();
            })
            .replace(/^postcss/, 'PostCSS');
        answers.KEYWORDS = ',\n    ' + answers.KEYWORDS
            .split(',')
            .map(function (i) {
                return '"' + i.trim() + '"';
            })
            .join(',\n    ');

        fillFiles(__dirname);
        cleanRepo(function () {
            renameProject(function () {
                process.exit(0);
            });
        });
    }

};
nextQuestion();

var fillFiles = function (dir) {
    fs.readdirSync(dir).forEach(function (file) {
        if ( file == '.git' ) return;

        var filepath = path.join(dir, file);
        if ( fs.lstatSync(filepath).isDirectory() ) {
            fillFiles(filepath);

        } else {
            var content = fs.readFileSync(filepath).toString();
            for ( var code in answers ) {
                while ( content.indexOf(code) != -1 ) {
                    content = content.replace(code, answers[code]);
                }
            }
            fs.writeFileSync(filepath, content);
        }
    });
};

var cleanRepo = function (callback) {
    var readme = path.join(__dirname, 'README.md');
    fs.unlinkSync(readme);
    fs.renameSync(readme + '.example', readme);
    fs.unlinkSync(path.join(__dirname, 'start'));
    exec('cd "' + __dirname + '" && rm -Rf .git/ && git init', callback);
};

var renameProject = function (callback) {
    var dir = __dirname.replace(/postcss-plugin-boilerplate$/,
                                answers.PLUGIN_NAME);
    exec('mv "' + __dirname + '" "' + dir + '"', callback);
};
